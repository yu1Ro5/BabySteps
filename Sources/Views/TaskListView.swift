import SwiftData
import SwiftUI

/// „Çø„Çπ„ÇØ‰∏ÄË¶ß„Å®„Çø„Çπ„ÇØÁÆ°ÁêÜÊ©üËÉΩ„ÇíÊèê‰æõ„Åô„ÇãÁîªÈù¢„ÅÆ„Éì„É•„ÉºÊßãÈÄ†‰Ωì„Åß„Åô„ÄÇ
struct TaskListView: View {
    /// „Éá„Éº„ÇøÊìç‰Ωú„ÅÆ„Åü„ÇÅ„ÅÆSwiftData„É¢„Éá„É´„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Åß„Åô„ÄÇ
    @Environment(\.modelContext) private var modelContext
    /// SwiftData„Çπ„Éà„Ç¢„Åã„ÇâÂèñÂæó„Åï„Çå„Åü„Åô„Åπ„Å¶„ÅÆ„Çø„Çπ„ÇØ„Åß„Åô„ÄÇ
    @Query private var tasks: [Task]
    /// „Çø„Çπ„ÇØ„ÇÑ„Çπ„ÉÜ„ÉÉ„Éó„ÇíÁÆ°ÁêÜ„Åô„Çã„Éì„É•„Éº„É¢„Éá„É´„Åß„Åô„ÄÇ
    @State private var viewModel: TaskViewModel?
    /// „Çø„Çπ„ÇØËøΩÂä†„Ç∑„Éº„Éà„ÅÆË°®Á§∫Áä∂ÊÖã„ÇíÁÆ°ÁêÜ„Åó„Åæ„Åô„ÄÇ
    @State private var showingAddTask = false
    /// Êñ∞„Åó„ÅÑ„Çø„Çπ„ÇØ„ÅÆ„Çø„Ç§„Éà„É´ÂÖ•Âäõ„Çí‰øùÊåÅ„Åó„Åæ„Åô„ÄÇ
    @State private var newTaskTitle = ""
    /// „Çπ„ÉÜ„ÉÉ„ÉóËøΩÂä†ÂØæË±°„Å®„Åó„Å¶ÈÅ∏Êäû‰∏≠„ÅÆ„Çø„Çπ„ÇØ„Åß„Åô„ÄÇ
    @State private var selectedTask: Task?
    /// Êñ∞„Åó„ÅÑ„Çø„Çπ„ÇØ‰ΩúÊàêÊôÇ„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„ÇπÔºà„Çπ„ÉÜ„ÉÉ„ÉóÔºâÊï∞Ôºà„Éá„Éï„Ç©„É´„Éà: 5Ôºâ„ÄÇ
    @State private var stepCount = 5

    /// „É°„Ç§„É≥ÁîªÈù¢„ÅÆViewÈöéÂ±§„ÇíÂÆöÁæ©„Åó„Åæ„Åô„ÄÇ
    var body: some View {
        NavigationStack {
            VStack {
                // „Çø„Çπ„ÇØ‰∏ÄË¶ß
                taskList
            }
            .navigationTitle("BabySteps")
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button(action: { showingAddTask = true }) {
                        Image(systemName: "plus")
                    }
                }
            }
            .sheet(isPresented: $showingAddTask) {
                addTaskSheet
            }
            .sheet(item: $selectedTask) { task in
                NavigationStack {
                    VStack(spacing: 20) {
                        Text("„Äå\(task.title)„Äç„Å´„Çπ„ÉÜ„ÉÉ„Éó„ÇíËøΩÂä†")
                            .font(.title2)
                            .fontWeight(.bold)
                            .multilineTextAlignment(.center)

                        Text("„Åì„ÅÆ„Çø„Çπ„ÇØ„Å´ÁùÄÊâãÂõûÊï∞„ÇíËøΩÂä†„Åó„Åæ„Åô")
                            .font(.caption)
                            .foregroundColor(.secondary)
                            .multilineTextAlignment(.center)

                        Button("ËøΩÂä†") {
                            viewModel?.addStep(to: task)
                            selectedTask = nil
                        }
                        .buttonStyle(.borderedProminent)

                        Spacer()
                    }
                    .padding()
                    .navigationTitle("„Çπ„ÉÜ„ÉÉ„ÉóËøΩÂä†")
                    .navigationBarTitleDisplayMode(.inline)
                    .toolbar {
                        ToolbarItem(placement: .navigationBarLeading) {
                            Button("„Ç≠„É£„É≥„Çª„É´") {
                                selectedTask = nil
                            }
                        }
                    }
                }
            }
            .onAppear {
                // ModelContext„Çí‰ΩøÁî®„Åó„Å¶ViewModel„Çí‰ΩúÊàê
                viewModel = TaskViewModel(modelContext: modelContext)

                // Êó¢Â≠ò„ÅÆÂÆå‰∫ÜÊ∏à„Åø„Çπ„ÉÜ„ÉÉ„Éó„Å´completedAt„ÇíË®≠ÂÆö
                initializeCompletedSteps()
            }
        }
    }

    /// „Çø„Çπ„ÇØ‰∏ÄË¶ß„É™„Çπ„Éà„ÅÆView„ÇíËøî„Åó„Åæ„Åô„ÄÇ
    private var taskList: some View {
        List {
            ForEach(tasks, id: \.id) { task in
                TaskRowView(
                    task: task,
                    viewModel: viewModel,
                    onAddStep: { selectedTask = task }
                )
            }
            .onDelete(perform: deleteTasks)
        }
    }

    /// Êñ∞„Åó„ÅÑ„Çø„Çπ„ÇØËøΩÂä†Áî®„ÅÆ„Ç∑„Éº„ÉàView„ÇíËøî„Åó„Åæ„Åô„ÄÇ
    private var addTaskSheet: some View {
        NavigationStack {
            VStack(spacing: 20) {
                Text("Êñ∞„Åó„ÅÑ„Çø„Çπ„ÇØ„Çí‰ΩúÊàê")
                    .font(.title2)
                    .fontWeight(.bold)

                TextField("„Çø„Çπ„ÇØ„ÅÆ„Çø„Ç§„Éà„É´", text: $newTaskTitle)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .padding(.horizontal)

                // „Çπ„ÉÜ„ÉÉ„ÉóÊï∞ÈÅ∏ÊäûUI
                VStack(spacing: 12) {
                    Text("„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„ÅÆÊï∞")
                        .font(.headline)
                        .foregroundColor(.primary)

                    HStack(spacing: 20) {
                        Button(action: {
                            if stepCount > 1 {
                                stepCount -= 1
                            }
                        }) {
                            Image(systemName: "minus.circle.fill")
                                .font(.title2)
                                .foregroundColor(.red)
                        }
                        .disabled(stepCount <= 1)

                        Text("\(stepCount)")
                            .font(.title)
                            .fontWeight(.bold)
                            .frame(minWidth: 60)

                        Button(action: {
                            stepCount += 1
                        }) {
                            Image(systemName: "plus.circle.fill")
                                .font(.title2)
                                .foregroundColor(.blue)
                        }
                    }

                    Text("\(stepCount)ÂÄã„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„Åå‰ΩúÊàê„Åï„Çå„Åæ„Åô")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                .padding()
                .background(Color(.systemGray6))
                .cornerRadius(12)

                Button("‰ΩúÊàê") {
                    if !newTaskTitle.isEmpty {
                        _ = viewModel?.createTaskWithSteps(title: newTaskTitle, stepCount: stepCount)
                        newTaskTitle = ""
                        stepCount = 5  // „É™„Çª„ÉÉ„Éà
                        showingAddTask = false
                    }
                }
                .buttonStyle(.borderedProminent)
                .disabled(newTaskTitle.isEmpty)

                Spacer()
            }
            .padding()
            .navigationTitle("„Çø„Çπ„ÇØËøΩÂä†")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("„Ç≠„É£„É≥„Çª„É´") {
                        showingAddTask = false
                        newTaskTitle = ""
                        stepCount = 5  // „É™„Çª„ÉÉ„Éà
                    }
                }
            }
        }
    }

    /// ÊåáÂÆö„Åï„Çå„Åü„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÅÆ„Çø„Çπ„ÇØ„ÇíÂâäÈô§„Åó„Åæ„Åô„ÄÇ
    /// - Parameter offsets: „Çø„Çπ„ÇØ„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
    private func deleteTasks(offsets: IndexSet) {
        for index in offsets {
            viewModel?.deleteTask(tasks[index])
        }
    }

    /// Êó¢Â≠ò„ÅÆÂÆå‰∫ÜÊ∏à„Åø„Çπ„ÉÜ„ÉÉ„Éó„Å´completedAt„ÅÆÊó•‰ªò„ÇíË®≠ÂÆö„Åó„Åæ„Åô„ÄÇ
    private func initializeCompletedSteps() {
        var hasChanges = false
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
        dateFormatter.timeZone = TimeZone.current

        print("üîß ÂÆå‰∫ÜÊ∏à„Åø„Çπ„ÉÜ„ÉÉ„Éó„ÅÆÂàùÊúüÂåñÈñãÂßã")

        for task in tasks {
            print("üîß „Çø„Çπ„ÇØ: \(task.title)")
            for step in task.steps {
                if step.isCompleted {
                    if step.completedAt == nil {
                        // ÂÆå‰∫ÜÊ∏à„Åø„Å†„ÅåcompletedAt„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà
                        step.completedAt = Date()
                        hasChanges = true
                        print(
                            "  ‚úÖ „Çπ„ÉÜ„ÉÉ„Éó\(step.order + 1) - completedAt„ÇíË®≠ÂÆö: \(dateFormatter.string(from: step.completedAt!))"
                        )
                    }
                    else {
                        print(
                            "  ‚ÑπÔ∏è „Çπ„ÉÜ„ÉÉ„Éó\(step.order + 1) - Êó¢„Å´completedAtË®≠ÂÆöÊ∏à„Åø: \(dateFormatter.string(from: step.completedAt!))"
                        )
                    }
                }
                else {
                    print("  ‚è≥ „Çπ„ÉÜ„ÉÉ„Éó\(step.order + 1) - Êú™ÂÆå‰∫Ü")
                }
            }
        }

        if hasChanges {
            print("üîß Â§âÊõ¥„Çí‰øùÂ≠ò‰∏≠...")
            try? modelContext.save()
            print("üîß ‰øùÂ≠òÂÆå‰∫Ü")
        }
        else {
            print("üîß Â§âÊõ¥„Å™„Åó")
        }
    }
}

// MARK: - Task Row View

/// 1„Å§„ÅÆ„Çø„Çπ„ÇØÊÉÖÂ†±„Å®„Åù„ÅÆ„Çπ„ÉÜ„ÉÉ„ÉóÈÄ≤Êçó„ÇíË°®Á§∫„Åô„Çã„Åü„ÇÅ„ÅÆ„Éì„É•„ÉºÊßãÈÄ†‰Ωì„Åß„Åô„ÄÇ
struct TaskRowView: View {
    /// Ë°®Á§∫ÂØæË±°„ÅÆ„Çø„Çπ„ÇØ„ÄÇ
    let task: Task
    /// „Çø„Çπ„ÇØÊìç‰ΩúÁî®„ÅÆ„Éì„É•„Éº„É¢„Éá„É´Ôºànil„ÅÆÂèØËÉΩÊÄß„ÅÇ„ÇäÔºâ„ÄÇ
    let viewModel: TaskViewModel?
    /// Ôºã„Éú„Çø„É≥„Åå„Çø„ÉÉ„Éó„Åï„Çå„ÅüÈöõ„Å´Âëº„Å∞„Çå„Çã„ÇØ„É≠„Éº„Ç∏„É£„ÄÇ
    let onAddStep: () -> Void

    /// „Çø„Çπ„ÇØ1‰ª∂„ÅÆË°®Á§∫„É¨„Ç§„Ç¢„Ç¶„Éà„ÇíÂÆöÁæ©„Åó„Åæ„Åô„ÄÇ
    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            // „Çø„Çπ„ÇØ„Çø„Ç§„Éà„É´
            HStack {
                Text(task.title)
                    .font(.headline)

                Spacer()

                Button(action: onAddStep) {
                    Image(systemName: "plus.circle")
                        .foregroundColor(.blue)
                }
            }

            // „Çπ„ÉÜ„ÉÉ„Éó‰∏ÄË¶ß
            if !task.steps.isEmpty {
                LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 5), spacing: 8) {
                    ForEach(task.steps.sorted(by: { $0.order < $1.order }), id: \.id) { step in
                        Button(action: {
                            guard let viewModel = viewModel else { return }
                            viewModel.toggleStepCompletion(step)
                        }) {
                            Image(systemName: step.isCompleted ? "checkmark.square.fill" : "square")
                                .foregroundColor(step.isCompleted ? .green : .gray)
                                .font(.title2)
                        }
                        .buttonStyle(PlainButtonStyle())
                        .disabled(viewModel == nil)
                    }
                }
                .padding(.leading)
            }
            else {
                Text("„Çπ„ÉÜ„ÉÉ„Éó„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .italic()
            }
        }
        .padding()
        .background(Color(.systemGray6))
        .cornerRadius(12)
    }
}

#Preview {
    TaskListView()
        .modelContainer(for: Task.self, inMemory: true)
}
