import Foundation
import SwiftData
import SwiftUI

@Observable
class TaskViewModel {
    let modelContext: ModelContext
    
    // „Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£Êõ¥Êñ∞„ÅÆÈÄöÁü•Áî®
    var onActivityUpdate: (() -> Void)?
    
    init(modelContext: ModelContext) {
        self.modelContext = modelContext
    }
    
    // MARK: - Task Management
    
    // Êñ∞„Åó„ÅÑ„Çø„Çπ„ÇØ„Çí‰ΩúÊàê
    func createTask(title: String) -> Task {
        let task = Task(title: title)
        modelContext.insert(task)
        try? modelContext.save()
        notifyActivityUpdate()
        return task
    }
    
    // „Çø„Çπ„ÇØ„ÇíÂâäÈô§
    func deleteTask(_ task: Task) {
        modelContext.delete(task)
        try? modelContext.save()
        notifyActivityUpdate()
    }
    
    // „Çø„Çπ„ÇØ„ÅÆ„Çø„Ç§„Éà„É´„ÇíÊõ¥Êñ∞
    func updateTaskTitle(_ task: Task, newTitle: String) {
        task.title = newTitle
        try? modelContext.save()
        notifyActivityUpdate()
    }
    
    // MARK: - Step Management
    
    // „Çø„Çπ„ÇØ„Å´„Çπ„ÉÜ„ÉÉ„Éó„ÇíËøΩÂä†
    func addStep(to task: Task) {
        let order = task.steps.count
        let step = TaskStep(order: order)
        step.task = task
        task.addStep(step)
        modelContext.insert(step)
        try? modelContext.save()
        notifyActivityUpdate()
    }
    
    // „Çπ„ÉÜ„ÉÉ„Éó„ÇíÂâäÈô§
    func removeStep(_ step: TaskStep, from task: Task) {
        task.removeStep(step)
        modelContext.delete(step)
        try? modelContext.save()
        notifyActivityUpdate()
    }
    
    // „Çπ„ÉÜ„ÉÉ„Éó„ÅÆÂÆå‰∫ÜÁä∂ÊÖã„ÇíÂàá„ÇäÊõø„Åà
    func toggleStepCompletion(_ step: TaskStep) {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
        dateFormatter.timeZone = TimeZone.current
        
        print("üîÑ „Çπ„ÉÜ„ÉÉ„ÉóÂÆå‰∫ÜÁä∂ÊÖãÂàá„ÇäÊõø„ÅàÈñãÂßã: „Çπ„ÉÜ„ÉÉ„Éó\(step.order + 1)")
        print("üîÑ ÁèæÂú®„ÅÆÁä∂ÊÖã: isCompleted=\(step.isCompleted), completedAt=\(step.completedAt?.description ?? "nil")")
        
        step.toggleCompletion()
        
        print("üîÑ Âàá„ÇäÊõø„ÅàÂæå„ÅÆÁä∂ÊÖã: isCompleted=\(step.isCompleted), completedAt=\(step.completedAt?.description ?? "nil")")
        
        try? modelContext.save()
        print("üîÑ „Éá„Éº„Çø„Éô„Éº„Çπ‰øùÂ≠òÂÆå‰∫Ü")
        
        // „Çπ„ÉÜ„ÉÉ„ÉóÂÆå‰∫ÜÊôÇ„ÅØÂøÖ„Åö„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£„ÇíÊõ¥Êñ∞
        notifyActivityUpdate()
        print("üîÑ „Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£Êõ¥Êñ∞ÈÄöÁü•ÂÆå‰∫Ü")
    }
    

    
    // MARK: - Data Queries
    
    // ÂÖ®„Çø„Çπ„ÇØ„ÇíÂèñÂæó
    func fetchTasks() throws -> [Task] {
        let descriptor = FetchDescriptor<Task>(
            sortBy: [SortDescriptor(\.createdAt, order: .reverse)]
        )
        return try modelContext.fetch(descriptor)
    }
    
    // ÂÆå‰∫Ü„Åó„Åü„Çø„Çπ„ÇØ„ÇíÂèñÂæó
    func fetchCompletedTasks() throws -> [Task] {
        let descriptor = FetchDescriptor<Task>(
            predicate: #Predicate<Task> { task in
                task.steps.allSatisfy { $0.isCompleted }
            },
            sortBy: [SortDescriptor(\.createdAt, order: .reverse)]
        )
        return try modelContext.fetch(descriptor)
    }
    
    // ÈÄ≤Ë°å‰∏≠„ÅÆ„Çø„Çπ„ÇØ„ÇíÂèñÂæó
    func fetchInProgressTasks() throws -> [Task] {
        let descriptor = FetchDescriptor<Task>(
            predicate: #Predicate<Task> { task in
                !task.steps.allSatisfy { $0.isCompleted } && !task.steps.isEmpty
            },
            sortBy: [SortDescriptor(\.createdAt, order: .reverse)]
        )
        return try modelContext.fetch(descriptor)
    }
    
    // MARK: - Progress Management
    

    
    // MARK: - Activity Update Notification
    
    // „Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£Êõ¥Êñ∞„ÅÆÈÄöÁü•
    private func notifyActivityUpdate() {
        onActivityUpdate?()
    }
}