{
  "SwiftUI View": {
    "prefix": "swiftui-view",
    "body": [
      "import SwiftUI",
      "",
      "struct ${1:ViewName}View: View {",
      "    @StateObject private var viewModel = ${1:ViewName}ViewModel()",
      "    ",
      "    var body: some View {",
      "        ${2:VStack} {",
      "            ${3:// Content here}",
      "        }",
      "        .navigationTitle(\"${4:Title}\")",
      "        .onAppear {",
      "            viewModel.onAppear()",
      "        }",
      "    }",
      "}",
      "",
      "#Preview {",
      "    ${1:ViewName}View()",
      "}"
    ],
    "description": "SwiftUI View with MVVM pattern"
  },
  "SwiftUI ViewModel": {
    "prefix": "swiftui-viewmodel",
    "body": [
      "import Foundation",
      "import Combine",
      "",
      "@MainActor",
      "final class ${1:ViewName}ViewModel: ObservableObject {",
      "    @Published var isLoading = false",
      "    @Published var errorMessage: String?",
      "    ",
      "    private var cancellables = Set<AnyCancellable>()",
      "    ",
      "    init() {",
      "        setupBindings()",
      "    }",
      "    ",
      "    func onAppear() {",
      "        // Handle view appearance",
      "    }",
      "    ",
      "    private func setupBindings() {",
      "        // Setup data bindings",
      "    }",
      "    ",
      "    deinit {",
      "        cancellables.removeAll()",
      "    }",
      "}"
    ],
    "description": "SwiftUI ViewModel with MVVM pattern"
  },
  "SwiftUI Model": {
    "prefix": "swiftui-model",
    "body": [
      "import Foundation",
      "",
      "struct ${1:ModelName}: Codable, Identifiable, Equatable {",
      "    let id: ${2:UUID}",
      "    ${3:// Add properties here}",
      "    ",
      "    init(id: ${2:UUID} = ${2:UUID}(), ${4:// parameters}) {",
      "        self.id = id",
      "        ${5:// Initialize properties}",
      "    }",
      "}",
      "",
      "// MARK: - Coding Keys",
      "extension ${1:ModelName} {",
      "    enum CodingKeys: String, CodingKey {",
      "        case id",
      "        ${6:// Add coding keys}",
      "    }",
      "}"
    ],
    "description": "SwiftUI Model with Codable support"
  },
  "SwiftUI Service": {
    "prefix": "swiftui-service",
    "body": [
      "import Foundation",
      "import Combine",
      "",
      "protocol ${1:ServiceName}ServiceProtocol {",
      "    func ${2:fetchData}() -> AnyPublisher<${3:DataType}, Error>",
      "}",
      "",
      "final class ${1:ServiceName}Service: ${1:ServiceName}ServiceProtocol {",
      "    private let networkManager: NetworkManagerProtocol",
      "    ",
      "    init(networkManager: NetworkManagerProtocol = NetworkManager.shared) {",
      "        self.networkManager = networkManager",
      "    }",
      "    ",
      "    func ${2:fetchData}() -> AnyPublisher<${3:DataType}, Error> {",
      "        // Implement service logic",
      "        return networkManager.request(endpoint: ${4:Endpoint})",
      "            .eraseToAnyPublisher()",
      "    }",
      "}"
    ],
    "description": "SwiftUI Service with protocol-oriented design"
  },
  "SwiftUI List": {
    "prefix": "swiftui-list",
    "body": [
      "List(${1:items}) { item in",
      "    ${2:ItemRowView}(item: item)",
      "        .listRowSeparator(.hidden)",
      "        .listRowBackground(Color.clear)",
      "}",
      ".listStyle(.plain)",
      ".refreshable {",
      "    await viewModel.refreshData()",
      "}"
    ],
    "description": "SwiftUI List with refreshable support"
  },
  "SwiftUI Navigation": {
    "prefix": "swiftui-navigation",
    "body": [
      "NavigationView {",
      "    ${1:ContentView}()",
      "        .navigationTitle(\"${2:Title}\")",
      "        .navigationBarTitleDisplayMode(.large)",
      "        .toolbar {",
      "            ToolbarItem(placement: .navigationBarTrailing) {",
      "                Button(\"${3:Action}\") {",
      "                    viewModel.${4:performAction}()",
      "                }",
      "            }",
      "        }",
      "}",
      ".navigationViewStyle(.stack)"
    ],
    "description": "SwiftUI Navigation with toolbar"
  },
  "SwiftUI Form": {
    "prefix": "swiftui-form",
    "body": [
      "Form {",
      "    Section(\"${1:Section Title}\") {",
      "        ${2:// Form fields here}",
      "    }",
      "    ",
      "    Section {",
      "        Button(\"${3:Submit}\") {",
      "            viewModel.${4:submit}()",
      "        }",
      "        .disabled(viewModel.isLoading)",
      "    }",
      "}",
      ".formStyle(.grouped)"
    ],
    "description": "SwiftUI Form with sections"
  },
  "SwiftUI Async Image": {
    "prefix": "swiftui-async-image",
    "body": [
      "AsyncImage(url: ${1:imageURL}) { phase in",
      "    switch phase {",
      "    case .empty:",
      "        ProgressView()",
      "    case .success(let image):",
      "        image",
      "            .resizable()",
      "            .aspectRatio(contentMode: .fit)",
      "    case .failure(_):",
      "        Image(systemName: \"photo\")",
      "            .foregroundColor(.gray)",
      "    @unknown default:",
      "        EmptyView()",
      "    }",
      "}"
    ],
    "description": "SwiftUI AsyncImage with loading states"
  },
  "SwiftUI Alert": {
    "prefix": "swiftui-alert",
    "body": [
      ".alert(\"${1:Alert Title}\", isPresented: $viewModel.showAlert) {",
      "    Button(\"${2:OK}\") {",
      "        viewModel.${3:dismissAlert}()",
      "    }",
      "} message: {",
      "    Text(viewModel.alertMessage ?? \"${4:Default message}\")",
      "}"
    ],
    "description": "SwiftUI Alert with binding"
  },
  "SwiftUI Sheet": {
    "prefix": "swiftui-sheet",
    "body": [
      ".sheet(isPresented: $viewModel.showSheet) {",
      "    ${1:SheetView}()",
      "        .presentationDetents([.medium, .large])",
      "        .presentationDragIndicator(.visible)",
      "}"
    ],
    "description": "SwiftUI Sheet with presentation detents"
  },
  "SwiftUI TabView": {
    "prefix": "swiftui-tabview",
    "body": [
      "TabView {",
      "    ${1:FirstView}()",
      "        .tabItem {",
      "            Image(systemName: \"${2:house}\")",
      "            Text(\"${3:Home}\")",
      "        }",
      "    ",
      "    ${4:SecondView}()",
      "        .tabItem {",
      "            Image(systemName: \"${5:person}\")",
      "            Text(\"${6:Profile}\")",
      "        }",
      "}",
      ".accentColor(.${7:blue})"
    ],
    "description": "SwiftUI TabView with multiple tabs"
  },
  "SwiftUI LazyVGrid": {
    "prefix": "swiftui-lazyvgrid",
    "body": [
      "LazyVGrid(columns: [",
      "    GridItem(.flexible()),",
      "    GridItem(.flexible()),",
      "    GridItem(.flexible())",
      "], spacing: 16) {",
      "    ForEach(${1:items}) { item in",
      "        ${2:ItemView}(item: item)",
      "    }",
      "}",
      ".padding(.horizontal)"
    ],
    "description": "SwiftUI LazyVGrid with flexible columns"
  },
  "SwiftUI ScrollView": {
    "prefix": "swiftui-scrollview",
    "body": [
      "ScrollView {",
      "    LazyVStack(spacing: 16) {",
      "        ForEach(${1:items}) { item in",
      "            ${2:ItemView}(item: item)",
      "        }",
      "    }",
      "    .padding()",
      "}",
      ".scrollIndicators(.hidden)"
    ],
    "description": "SwiftUI ScrollView with LazyVStack"
  },
  "SwiftUI Button": {
    "prefix": "swiftui-button",
    "body": [
      "Button {",
      "    viewModel.${1:performAction}()",
      "} label: {",
      "    HStack {",
      "        Image(systemName: \"${2:plus}\")",
      "        Text(\"${3:Button Text}\")",
      "    }",
      "    .font(.headline)",
      "    .foregroundColor(.white)",
      "    .frame(maxWidth: .infinity)",
      "    .padding()",
      "    .background(Color.${4:blue})",
      "    .cornerRadius(10)",
      "}",
      ".disabled(viewModel.isLoading)"
    ],
    "description": "SwiftUI Button with custom styling"
  },
  "SwiftUI TextField": {
    "prefix": "swiftui-textfield",
    "body": [
      "TextField(\"${1:Placeholder}\", text: $viewModel.${2:text})",
      "    .textFieldStyle(.roundedBorder)",
      "    .autocapitalization(.none)",
      "    .disableAutocorrection(true)",
      "    .onSubmit {",
      "        viewModel.${3:onSubmit}()",
      "    }"
    ],
    "description": "SwiftUI TextField with common modifiers"
  },
  "SwiftUI StateObject": {
    "prefix": "swiftui-stateobject",
    "body": [
      "@StateObject private var viewModel = ${1:ViewName}ViewModel()"
    ],
    "description": "SwiftUI @StateObject property wrapper"
  },
  "SwiftUI ObservedObject": {
    "prefix": "swiftui-observedobject",
    "body": [
      "@ObservedObject var viewModel: ${1:ViewName}ViewModel"
    ],
    "description": "SwiftUI @ObservedObject property wrapper"
  },
  "SwiftUI Published": {
    "prefix": "swiftui-published",
    "body": [
      "@Published var ${1:propertyName}: ${2:DataType} = ${3:defaultValue}"
    ],
    "description": "SwiftUI @Published property wrapper"
  },
  "SwiftUI Binding": {
    "prefix": "swiftui-binding",
    "body": [
      "Binding(",
      "    get: { viewModel.${1:propertyName} },",
      "    set: { viewModel.${1:propertyName} = $0 }",
      ")"
    ],
    "description": "SwiftUI Binding with custom getter and setter"
  },
  "SwiftUI Environment": {
    "prefix": "swiftui-environment",
    "body": [
      "@Environment(\\.${1:colorScheme}) var colorScheme",
      "@Environment(\\.${2:sizeCategory}) var sizeCategory"
    ],
    "description": "SwiftUI Environment values"
  },
  "SwiftUI GeometryReader": {
    "prefix": "swiftui-geometryreader",
    "body": [
      "GeometryReader { geometry in",
      "    ${1:// Use geometry.size.width, geometry.size.height}",
      "    ${2:// Content here}",
      "}"
    ],
    "description": "SwiftUI GeometryReader for size-dependent layouts"
  },
  "SwiftUI PreferenceKey": {
    "prefix": "swiftui-preferencekey",
    "body": [
      "struct ${1:PreferenceName}PreferenceKey: PreferenceKey {",
      "    static var defaultValue: ${2:DataType} = ${3:defaultValue}",
      "    ",
      "    static func reduce(value: inout ${2:DataType}, nextValue: () -> ${2:DataType}) {",
      "        value = nextValue()",
      "    }",
      "}"
    ],
    "description": "SwiftUI PreferenceKey for view communication"
  },
  "SwiftUI Custom ViewModifier": {
    "prefix": "swiftui-viewmodifier",
    "body": [
      "struct ${1:ModifierName}Modifier: ViewModifier {",
      "    func body(content: Content) -> some View {",
      "        content",
      "            ${2:// Add modifiers here}",
      "    }",
      "}",
      "",
      "extension View {",
      "    func ${3:modifierName}() -> some View {",
      "        modifier(${1:ModifierName}Modifier())",
      "    }",
      "}"
    ],
    "description": "SwiftUI Custom ViewModifier with extension"
  },
  "SwiftUI Preview": {
    "prefix": "swiftui-preview",
    "body": [
      "#Preview {",
      "    ${1:ViewName}()",
      "        .environmentObject(${2:MockViewModel}())",
      "        .preferredColorScheme(.${3:light})",
      "}"
    ],
    "description": "SwiftUI Preview with environment and color scheme"
  }
}