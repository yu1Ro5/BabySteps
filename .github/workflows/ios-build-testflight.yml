name: iOS Build & TestFlight Auto

on:
  push:
    tags:
      - 'v*'  # v1.0.0, v2.1.3 などのタグで発火
  workflow_dispatch: # 手動トリガーも可能
    inputs:
      custom_version:
        description: 'Version to build (e.g., 1.0.0)'
        required: true
        type: string
        default: '1.0.0'

jobs:
  build-and-release:
    runs-on: macos-latest
    env:
      APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
      APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
      APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      EXPORT_OPTIONS_PLIST: ./ExportOptions.plist

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 全履歴を取得してタグを確認

      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode_16.4.app

      - name: Install XcodeGen
        run: |
          brew install xcodegen

      - name: Generate Xcode project
        run: |
          xcodegen generate
          ls -la *.xcodeproj

      - name: Validate build environment
        run: |
          echo "=== Build Environment Validation ==="
          echo "Xcode version: $(xcodebuild -version)"
          echo "iOS SDK: $(xcodebuild -showsdks | grep iOS)"
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Sources directory contents:"
          ls -la Sources/
          echo "Info.plist exists: $(test -f "Sources/Info.plist" && echo "Yes" || echo "No")"
          echo "Info.plist path: $(realpath Sources/Info.plist 2>/dev/null || echo "Path not found")"
          echo "Project files: $(ls -la *.xcodeproj 2>/dev/null || echo "No .xcodeproj found")"
          echo "=================================="

      - name: Get project info
        id: project_info
        run: |
          # Use explicit Info.plist path from project configuration
          INFO_PLIST="Sources/Info.plist"
          
          # Verify Info.plist exists and is readable
          if [ ! -f "$INFO_PLIST" ]; then
            echo "Error: Info.plist not found at $INFO_PLIST"
            echo "Current directory: $(pwd)"
            echo "Directory contents:"
            ls -la
            echo "Sources directory contents:"
            ls -la Sources/
            exit 1
          fi
          
          # Verify Info.plist is readable
          if [ ! -r "$INFO_PLIST" ]; then
            echo "Error: Info.plist is not readable at $INFO_PLIST"
            ls -la "$INFO_PLIST"
            exit 1
          fi
          
          echo "info_plist=$INFO_PLIST" >> $GITHUB_OUTPUT
          
          # タグからバージョンを抽出 (v1.2.3 -> 1.2.3)
          if [ "${{ github.event_name }}" = "push" ]; then
            TAG_VERSION="${GITHUB_REF#refs/tags/v}"
            echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
            echo "Tag version: $TAG_VERSION"
          fi
          
          echo "Info.plist: $INFO_PLIST"
          echo "Info.plist contents (first few lines):"
          head -10 "$INFO_PLIST"

      - name: Get latest build number
        id: build_number
        run: |
          # 前回のビルド番号を取得
          # GitHub Actionsのartifactsから最新のビルド番号を取得
          # 初回の場合は1から開始
          
          # 既存のビルド成果物があるかチェック
          if [ -d "./build" ] && [ -f "./build/build_number.txt" ]; then
            LATEST_BUILD=$(cat ./build/build_number.txt)
            echo "Found existing build number: $LATEST_BUILD"
          else
            LATEST_BUILD=0
            echo "No existing build number found, starting from 1"
          fi
          
          echo "build_number=$LATEST_BUILD" >> $GITHUB_OUTPUT
          echo "Latest build number: $LATEST_BUILD"

      - name: Set version and build number
        id: new_version
        run: |
          # タグからバージョンを取得、または手動入力から取得
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
          else
            TAG_VERSION="${{ steps.project_info.outputs.tag_version }}"
            NEW_VERSION="$TAG_VERSION"
          fi
          
          # ビルド番号は連番ベース（前回 + 1）
          PREVIOUS_BUILD="${{ steps.build_number.outputs.build_number }}"
          BUILD_NUMBER=$((PREVIOUS_BUILD + 1))
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          
          echo "Version: $NEW_VERSION"
          echo "Previous build: $PREVIOUS_BUILD"
          echo "New build number: $BUILD_NUMBER"

      - name: Update version and build number
        run: |
          INFO_PLIST="${{ steps.project_info.outputs.info_plist }}"
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          BUILD_NUMBER="${{ steps.new_version.outputs.build_number }}"
          
          echo "Updating Info.plist: $INFO_PLIST"
          echo "New version: $NEW_VERSION"
          echo "New build number: $BUILD_NUMBER"
          
          # Verify Info.plist before updating
          if [ ! -f "$INFO_PLIST" ]; then
            echo "Error: Info.plist not found at $INFO_PLIST"
            exit 1
          fi
          
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $NEW_VERSION" "$INFO_PLIST"
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" "$INFO_PLIST"
          
          echo "Version updated successfully: $NEW_VERSION ($BUILD_NUMBER)"
          echo "Updated Info.plist contents:"
          /usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$INFO_PLIST"
          /usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$INFO_PLIST"

      - name: Verify code signing configuration
        run: |
          echo "=== Code Signing Configuration ==="
          echo "Checking project settings..."
          
          # Verify the generated project has correct signing settings
          if [ -f "BabySteps.xcodeproj/project.pbxproj" ]; then
            echo "Project file found, checking signing configuration..."
            echo "Code signing settings in project:"
            grep -i "CODE_SIGN_STYLE\|CODE_SIGN_IDENTITY\|PROVISIONING_PROFILE\|DEVELOPMENT_TEAM" BabySteps.xcodeproj/project.pbxproj | head -15
          else
            echo "Warning: Project file not found, this might cause build issues"
          fi
          
          echo "=================================="

      - name: Setup code signing environment
        run: |
          echo "=== Setting up code signing environment ==="
          
          # Create a temporary keychain for build signing
          security create-keychain -p "" build.keychain
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          
          # Set keychain search list
          security list-keychains -s build.keychain login.keychain
          
          # Set keychain timeout to prevent signing issues
          security set-keychain-settings build.keychain
          
          echo "Code signing environment setup completed"
          echo "=========================================="

      - name: Build archive
        run: |
          echo "Starting archive build..."
          echo "Project: BabySteps.xcodeproj"
          echo "Scheme: BabySteps"
          echo "Configuration: Release"
          echo "Archive path: ./build/BabySteps.xcarchive"
          
          # Create build directory
          mkdir -p ./build
          
          # Clean any previous builds
          xcodebuild clean -project BabySteps.xcodeproj -scheme BabySteps -configuration Release || true
          
          # Build with explicit code signing settings to avoid conflicts
          xcodebuild -project BabySteps.xcodeproj \
                     -scheme BabySteps \
                     -configuration Release \
                     -archivePath ./build/BabySteps.xcarchive \
                     CODE_SIGN_STYLE=Automatic \
                     CODE_SIGN_IDENTITY="iPhone Developer" \
                     DEVELOPMENT_TEAM="58Y7Q3D4A7" \
                     PROVISIONING_PROFILE_SPECIFIER="" \
                     archive
          
          if [ $? -eq 0 ]; then
            echo "Archive build completed successfully"
            ls -la ./build/
          else
            echo "Archive build failed with error code $?"
            echo "=== Build Error Details ==="
            # Show more detailed error information
            xcodebuild -project BabySteps.xcodeproj \
                       -scheme BabySteps \
                       -configuration Release \
                       -archivePath ./build/BabySteps.xcarchive \
                       CODE_SIGN_STYLE=Automatic \
                       CODE_SIGN_IDENTITY="iPhone Developer" \
                       DEVELOPMENT_TEAM="58Y7Q3D4A7" \
                       PROVISIONING_PROFILE_SPECIFIER="" \
                       archive 2>&1 | tail -100
            echo "=========================="
            exit 1
          fi

      - name: Export IPA
        run: |
          echo "Starting IPA export..."
          echo "Archive path: ./build/BabySteps.xcarchive"
          echo "Export options: $EXPORT_OPTIONS_PLIST"
          echo "Export path: ./build"
          
          # Verify archive exists
          if [ ! -d "./build/BabySteps.xcarchive" ]; then
            echo "Error: Archive not found at ./build/BabySteps.xcarchive"
            ls -la ./build/
            exit 1
          fi
          
          xcodebuild -exportArchive \
                     -archivePath ./build/BabySteps.xcarchive \
                     -exportOptionsPlist $EXPORT_OPTIONS_PLIST \
                     -exportPath ./build
          
          if [ $? -eq 0 ]; then
            echo "IPA export completed successfully"
            ls -la ./build/
          else
            echo "IPA export failed with error code $?"
            echo "=== Export Error Details ==="
            xcodebuild -exportArchive \
                       -archivePath ./build/BabySteps.xcarchive \
                       -exportOptionsPlist $EXPORT_OPTIONS_PLIST \
                       -exportPath ./build 2>&1 | tail -100
            echo "==========================="
            exit 1
          fi

      - name: Upload to TestFlight
        run: |
          # IPAファイルの存在確認
          if [ ! -f "./build/BabySteps.ipa" ]; then
            echo "Error: IPA file not found"
            ls -la ./build/
            exit 1
          fi
          
          echo "Uploading to TestFlight..."
          xcrun altool --upload-app \
                        -f ./build/BabySteps.ipa \
                        --apiKey $APP_STORE_CONNECT_KEY_ID \
                        --apiIssuer $APP_STORE_CONNECT_ISSUER_ID \
                        --type ios

      - name: Save build number
        run: |
          BUILD_NUMBER="${{ steps.new_version.outputs.build_number }}"
          echo "$BUILD_NUMBER" > ./build/build_number.txt
          echo "Build number $BUILD_NUMBER saved"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-artifacts-v${{ steps.new_version.outputs.new_version }}
          path: build/
          retention-days: 30

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new_version.outputs.new_version }}
          release_name: Release v${{ steps.new_version.outputs.new_version }}
          body: |
            ## What's Changed
            
            Automated release for version ${{ steps.new_version.outputs.new_version }}
            
            ### Version Info
            - **Version**: ${{ steps.new_version.outputs.new_version }}
            - **Build**: ${{ steps.new_version.outputs.build_number }}
            - **Date**: $(date -u +'%Y-%m-%d %H:%M UTC')
            
            ### Build Artifacts
            IPA file and build artifacts are available in the Actions tab.
          draft: false
          prerelease: false
