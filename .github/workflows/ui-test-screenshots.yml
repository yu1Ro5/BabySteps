name: UI Test Screenshots

on:
  workflow_dispatch:
    inputs:
      device_type:
        description: 'デバイスタイプを選択'
        required: true
        default: 'both'
        type: choice
        options:
          - both
          - ipad
          - iphone
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

jobs:
  ui-test-screenshots:
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Select Xcode 16.4
        run: sudo xcode-select -switch /Applications/Xcode_16.4.app
        
      - name: Install XcodeGen and xcbeautify
        run: |
          brew install xcodegen
          brew install xcbeautify
          
      - name: Generate Xcode project
        run: |
          xcodegen generate
          
      - name: Verify project structure
        run: |
          echo "=== Project Structure ==="
          ls -la
          echo ""
          echo "=== Xcode Project Contents ==="
          ls -la BabySteps.xcodeproj/
          echo ""
          echo "=== Available Schemes ==="
          xcodebuild -list -project BabySteps.xcodeproj
          echo ""
          echo "=== Available Targets ==="
          xcodebuild -list -project BabySteps.xcodeproj | grep -A 20 "Targets:"
          
      - name: Check available simulators
        run: |
          echo "=== Available iOS Simulators ==="
          xcrun simctl list devices available | grep "iPhone" || echo "No iPhone simulators found"
          echo ""
          echo "=== Available iOS Runtimes ==="
          xcrun simctl list runtimes | grep "iOS" || echo "No iOS runtimes found"
          echo ""
          echo "=== Available iPhone Simulators ==="
          xcrun simctl list devices available | grep "iPhone.*Pro Max" || echo "No iPhone Pro Max simulators found"
          echo ""
          echo "=== Available iPad Simulators ==="
          xcrun simctl list devices available | grep "iPad.*Pro" || echo "No iPad Pro simulators found"
          
      - name: Run UI Tests for iPhone
        if: ${{ github.event.inputs.device_type == 'both' || github.event.inputs.device_type == 'iphone' || github.event_name == 'pull_request' }}
        run: |
          # 利用可能なiPhoneシミュレーターを確認
          echo "Checking available iPhone simulators..."
          AVAILABLE_IPHONE=$(xcrun simctl list devices available | grep "iPhone.*Pro Max" | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
          
          if [ -z "$AVAILABLE_IPHONE" ]; then
            echo "No iPhone Pro Max simulator found, trying iPhone 16..."
            AVAILABLE_IPHONE=$(xcrun simctl list devices available | grep "iPhone 16" | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
          fi
          
          if [ -z "$AVAILABLE_IPHONE" ]; then
            echo "No suitable iPhone simulator found, using first available..."
            AVAILABLE_IPHONE=$(xcrun simctl list devices available | grep "iPhone" | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
          fi
          
          echo "Using iPhone simulator: $AVAILABLE_IPHONE"
          
          # iPhone でUIテスト実行（xcbeautifyでログをフォーマット）
          echo "Running UI tests for iPhone..."
          xcodebuild test \
            -project BabySteps.xcodeproj \
            -scheme BabySteps \
            -destination "platform=iOS Simulator,name=$AVAILABLE_IPHONE,OS=18.6" \
            -only-testing:BabyStepsUITests/ScreenshotUITests \
            -resultBundlePath test-results-iphone.xcresult \
            -verbose | xcbeautify || echo "iPhone UI tests failed, but continuing..."
          
      - name: Run UI Tests for iPad
        if: ${{ github.event.inputs.device_type == 'both' || github.event.inputs.device_type == 'ipad' || github.event_name == 'pull_request' }}
        run: |
          # 利用可能なiPadシミュレーターを確認
          echo "Checking available iPad simulators..."
          AVAILABLE_IPAD=$(xcrun simctl list devices available | grep "iPad.*Pro.*13" | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
          
          if [ -z "$AVAILABLE_IPAD" ]; then
            echo "No iPad Pro 13-inch simulator found, trying iPad Pro..."
            AVAILABLE_IPAD=$(xcrun simctl list devices available | grep "iPad.*Pro" | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
          fi
          
          if [ -z "$AVAILABLE_IPAD" ]; then
            echo "No suitable iPad simulator found, using first available..."
            AVAILABLE_IPAD=$(xcrun simctl list devices available | grep "iPad" | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
          fi
          
          echo "Using iPad simulator: $AVAILABLE_IPAD"
          
          # iPad でUIテスト実行（xcbeautifyでログをフォーマット）
          echo "Running UI tests for iPad..."
          xcodebuild test \
            -project BabySteps.xcodeproj \
            -scheme BabySteps \
            -destination "platform=iOS Simulator,name=$AVAILABLE_IPAD,OS=18.6" \
            -only-testing:BabyStepsUITests/ScreenshotUITests \
            -resultBundlePath test-results-ipad.xcresult \
            -verbose | xcbeautify || echo "iPad UI tests failed, but continuing..."
          
      - name: Extract Screenshots from iPhone Tests
        if: ${{ github.event.inputs.device_type == 'both' || github.event.inputs.device_type == 'iphone' || github.event_name == 'pull_request' }}
        run: |
          # テスト結果からスクリーンショットを抽出
          if [ -f "test-results-iphone.xcresult" ]; then
            mkdir -p screenshots/iphone
            
            # xcresultからスクリーンショットを抽出
            xcrun xcresulttool export \
              --path test-results-iphone.xcresult \
              --output-path screenshots/iphone \
              --type screenshot || echo "Failed to extract iPhone screenshots"
            
            # ファイル名を整理
            cd screenshots/iphone
            for file in *.png; do
              if [[ -f "$file" ]]; then
                # ファイル名をApp Store用に整理
                case "$file" in
                  *"01-main-screen"*) mv "$file" "01-main-screen.png" ;;
                  *) echo "Unknown screenshot: $file" ;;
                esac
              fi
            done
            cd ../..
          else
            echo "iPhone test results not found, creating placeholder screenshots"
            mkdir -p screenshots/iphone
            echo "Screenshots could not be generated due to test failure" > screenshots/iphone/error.txt
          fi
          
      - name: Extract Screenshots from iPad Tests
        if: ${{ github.event.inputs.device_type == 'both' || github.event.inputs.device_type == 'ipad' || github.event_name == 'pull_request' }}
        run: |
          # テスト結果からスクリーンショットを抽出
          if [ -f "test-results-ipad.xcresult" ]; then
            mkdir -p screenshots/ipad
            
            # xcresultからスクリーンショットを抽出
            xcrun xcresulttool export \
              --path test-results-ipad.xcresult \
              --output-path screenshots/ipad \
              --type screenshot || echo "Failed to extract iPad screenshots"
            
            # ファイル名を整理
            cd screenshots/ipad
            for file in *.png; do
              if [[ -f "$file" ]]; then
                # ファイル名をApp Store用に整理
                case "$file" in
                  *"01-main-screen"*) mv "$file" "01-main-screen.png" ;;
                  *) echo "Unknown screenshot: $file" ;;
                esac
              fi
            done
            cd ../..
          else
            echo "iPad test results not found, creating placeholder screenshots"
            mkdir -p screenshots/ipad
            echo "Screenshots could not be generated due to test failure" > screenshots/ipad/error.txt
          fi
          
      - name: Upload screenshots as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ui-test-screenshots-${{ github.run_number }}
          path: screenshots/
          retention-days: 30
          
      - name: Create summary
        run: |
          echo "## 📱 UI Test Screenshots Generated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Method**: XCUITest with automated UI interactions" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Log Formatting**: xcbeautify for beautiful Xcode logs" >> $GITHUB_STEP_SUMMARY
          echo "**Current Test**: Main screen screenshot only (simplified for stability)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "screenshots/iphone" ]; then
            if [ -f "screenshots/iphone/error.txt" ]; then
              echo "### ❌ iPhone Screenshots - Failed" >> $GITHUB_STEP_SUMMARY
              echo "Screenshots could not be generated due to test failure" >> $GITHUB_STEP_SUMMARY
            else
              echo "### 📱 iPhone Screenshots - Success" >> $GITHUB_STEP_SUMMARY
              echo "- Main Screen - メイン画面" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -d "screenshots/ipad" ]; then
            if [ -f "screenshots/ipad/error.txt" ]; then
              echo "### ❌ iPad Screenshots - Failed" >> $GITHUB_STEP_SUMMARY
              echo "Screenshots could not be generated due to test failure" >> $GITHUB_STEP_SUMMARY
            else
              echo "### 📱 iPad Screenshots - Success" >> $GITHUB_STEP_SUMMARY
              echo "- Main Screen - メイン画面" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "**📥 Download screenshots:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to Actions tab → UI Test Screenshots" >> $GITHUB_STEP_SUMMARY
          echo "2. Click on this run: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "3. Scroll down to Artifacts section" >> $GITHUB_STEP_SUMMARY
          echo "4. Download 'ui-test-screenshots-${{ github.run_number }}'" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**💡 Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "Once this basic test passes, we can gradually add more screenshot tests:" >> $GITHUB_STEP_SUMMARY
          echo "- Task list view" >> $GITHUB_STEP_SUMMARY
          echo "- Add task modal" >> $GITHUB_STEP_SUMMARY
          echo "- Task detail view" >> $GITHUB_STEP_SUMMARY
          echo "- Progress indicators" >> $GITHUB_STEP_SUMMARY