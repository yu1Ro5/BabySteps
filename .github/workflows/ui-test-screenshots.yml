name: UI Test Screenshots

on:
  workflow_dispatch:
    inputs:
      device_type:
        description: 'デバイスタイプを選択'
        required: true
        default: 'both'
        type: choice
        options:
          - both
          - ipad
          - iphone
  push:
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  ui-test-screenshots:
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Select Xcode 16.4
        run: sudo xcode-select -switch /Applications/Xcode_16.4.app
        
      - name: Install XcodeGen and xcbeautify
        run: |
          brew install xcodegen
          brew install xcbeautify
          
      - name: Generate Xcode project
        run: |
          xcodegen generate
          
      - name: Verify XcodeGen Generation
        run: |
          echo "=== XcodeGen Generation Verification ==="
          
          if [ -f "BabySteps.xcodeproj/project.pbxproj" ]; then
            echo "✅ XcodeGen project generated successfully"
            
            # プロジェクトの基本情報を確認
            echo "=== Project Basic Info ==="
            xcodebuild -list -project BabySteps.xcodeproj
            
            # UIテストターゲットが正しく生成されているか確認
            echo ""
            echo "=== UI Test Target Verification ==="
            if grep -q "BabyStepsUITests" BabySteps.xcodeproj/project.pbxproj; then
              echo "✅ BabyStepsUITests target found in project"
            else
              echo "❌ BabyStepsUITests target NOT found in project"
            fi
            
            # TEST_HOSTの設定を確認
            if grep -q "TEST_HOST.*BabySteps.app" BabySteps.xcodeproj/project.pbxproj; then
              echo "✅ TEST_HOST correctly configured"
            else
              echo "❌ TEST_HOST NOT correctly configured"
            fi
          else
            echo "❌ XcodeGen project generation failed"
            exit 1
          fi
          
      - name: Verify project structure
        run: |
          echo "=== Project Structure ==="
          ls -la
          echo ""
          echo "=== Xcode Project Contents ==="
          ls -la BabySteps.xcodeproj/
          echo ""
          echo "=== Available Schemes ==="
          xcodebuild -list -project BabySteps.xcodeproj
          echo ""
          echo "=== Available Targets ==="
          xcodebuild -list -project BabySteps.xcodeproj | grep -A 20 "Targets:"
          
      - name: Verify UI Test Target Configuration
        run: |
          echo "=== UI Test Target Configuration ==="
          echo "Checking BabyStepsUITests target configuration..."
          
          # プロジェクトファイルの内容を確認
          if [ -f "BabySteps.xcodeproj/project.pbxproj" ]; then
            echo "✅ Project file exists"
            
            # UIテストターゲットの設定を確認
            echo "=== UI Test Target Settings ==="
            grep -A 10 -B 5 "BabyStepsUITests" BabySteps.xcodeproj/project.pbxproj | grep -E "(TEST_HOST|TEST_TARGET_NAME|PRODUCT_BUNDLE_IDENTIFIER)" || echo "No UI test settings found"
            
            # スキームの設定を確認
            echo "=== Scheme Configuration ==="
            find BabySteps.xcodeproj -name "*.xcscheme" -exec echo "Scheme file: {}" \;
          else
            echo "❌ Project file not found"
          fi
          
          echo ""
          echo "=== Generated Xcode Project Info ==="
          xcodebuild -showBuildSettings -project BabySteps.xcodeproj -target BabyStepsUITests 2>/dev/null | grep -E "(TEST_HOST|TEST_TARGET_NAME|PRODUCT_BUNDLE_IDENTIFIER)" || echo "Could not retrieve build settings"
          
      - name: Deep Dive UI Test Configuration
        run: |
          echo "=== Deep Dive UI Test Configuration ==="
          
          # プロジェクトファイルの詳細分析
          if [ -f "BabySteps.xcodeproj/project.pbxproj" ]; then
            echo "=== Project.pbxproj Analysis ==="
            
            # UIテストターゲットの完全な設定を確認
            echo "--- BabyStepsUITests Target Configuration ---"
            awk '/BabyStepsUITests/,/};/' BabySteps.xcodeproj/project.pbxproj | grep -E "(TEST_HOST|TEST_TARGET_NAME|PRODUCT_BUNDLE_IDENTIFIER|BUNDLE_LOADER|CODE_SIGNING_ALLOWED|SKIP_INSTALL)" || echo "No UI test settings found in project file"
            
            # メインアプリターゲットの設定も確認
            echo "--- BabySteps App Target Configuration ---"
            awk '/BabySteps[^T]/,/};/' BabySteps.xcodeproj/project.pbxproj | grep -E "(PRODUCT_NAME|PRODUCT_BUNDLE_IDENTIFIER|EXECUTABLE_NAME)" || echo "No app target settings found"
            
            # スキームファイルの詳細確認
            echo "=== Scheme File Analysis ==="
            for scheme_file in BabySteps.xcodeproj/xcshareddata/xcschemes/*.xcscheme; do
              if [ -f "$scheme_file" ]; then
                echo "Scheme: $(basename "$scheme_file")"
                grep -A 5 -B 5 "BabyStepsUITests" "$scheme_file" || echo "  No UI test target found in scheme"
              fi
            done
          fi
          
          echo ""
          echo "=== Build Settings Verification ==="
          # 各ターゲットのビルド設定を詳細確認
          for target in "BabySteps" "BabyStepsUITests"; do
            echo "--- $target Build Settings ---"
            xcodebuild -showBuildSettings -project BabySteps.xcodeproj -target "$target" 2>/dev/null | grep -E "(PRODUCT_NAME|PRODUCT_BUNDLE_IDENTIFIER|TEST_HOST|TEST_TARGET_NAME|BUNDLE_LOADER)" || echo "  Could not retrieve build settings for $target"
          done
          
      - name: Verify Scheme Configuration (Article Recommendation)
        run: |
          echo "=== Scheme Configuration Verification (Article Recommendation) ==="
          
          # 記事で推奨されているスキーム設定の確認
          if [ -f "BabySteps.xcodeproj/xcshareddata/xcschemes/BabySteps.xcscheme" ]; then
            echo "✅ Shared scheme file found"
            
            # スキーム内のテストターゲット設定を確認
            echo "=== Test Targets in Scheme ==="
            grep -A 10 -B 5 "<TestableReference" BabySteps.xcodeproj/xcshareddata/xcschemes/BabySteps.xcscheme || echo "No TestableReference found"
            
            # UIテストターゲットが含まれているか確認
            if grep -q "BabyStepsUITests" BabySteps.xcodeproj/xcshareddata/xcschemes/BabySteps.xcscheme; then
              echo "✅ BabyStepsUITests found in scheme"
            else
              echo "❌ BabyStepsUITests NOT found in scheme"
            fi
            
            # スキームファイルの全体構造を確認
            echo "=== Scheme File Structure ==="
            grep -E "(BuildableReference|TestableReference|MacroExpansion)" BabySteps.xcodeproj/xcshareddata/xcschemes/BabySteps.xcscheme || echo "No key elements found in scheme"
          else
            echo "❌ Shared scheme file not found"
            echo "Creating scheme manually..."
            
            # 手動でスキームを作成
            mkdir -p BabySteps.xcodeproj/xcshareddata/xcschemes
            cat > BabySteps.xcodeproj/xcshareddata/xcschemes/BabySteps.xcscheme << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1640"
   version = "1.7">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "BabySteps"
               BuildableName = "BabySteps.app"
               BlueprintName = "BabySteps"
               ReferencedContainer = "container:BabySteps.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES"
      shouldAutocreateTestPlan = "YES">
      <Testables>
         <TestableReference
            skipped = "NO">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "BabyStepsTests"
               BuildableName = "BabyStepsTests.xctest"
               BlueprintName = "BabyStepsTests"
               ReferencedContainer = "container:BabySteps.xcodeproj">
            </BuildableReference>
         </TestableReference>
         <TestableReference
            skipped = "NO">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "BabyStepsUITests"
               BuildableName = "BabyStepsUITests.xctest"
               BlueprintName = "BabyStepsUITests"
               ReferencedContainer = "container:BabySteps.xcodeproj">
            </BuildableReference>
         </TestableReference>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "BabySteps"
            BuildableName = "BabySteps.app"
            BlueprintName = "BabySteps"
            ReferencedContainer = "container:BabySteps.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Release"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "BabySteps"
            BuildableName = "BabySteps.app"
            BlueprintName = "BabySteps"
            ReferencedContainer = "container:BabySteps.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>
EOF
            echo "✅ Manual scheme file created"
          fi
          
      - name: Show available SDKs
        run: xcodebuild -showsdks
          
      - name: Check available simulators
        run: |
          echo "=== Available iOS Simulators ==="
          xcrun simctl list devices available | grep "iPhone" || echo "No iPhone simulators found"
          echo ""
          echo "=== Available iOS Runtimes ==="
          xcrun simctl list runtimes | grep "iOS" || echo "No iOS runtimes found"
          echo ""
          echo "=== Available iPhone Simulators ==="
          xcrun simctl list devices available | grep "iPhone.*Pro Max" || echo "No iPhone Pro Max simulators found"
          echo ""
          echo "=== Available iPad Simulators ==="
          xcrun simctl list devices available | grep "iPad.*Pro" || echo "No iPad Pro simulators found"
          
      - name: Run UI Tests for iPhone
        if: ${{ github.event.inputs.device_type == 'both' || github.event.inputs.device_type == 'iphone' || github.event_name == 'pull_request' }}
        run: |
          # iPhone 16 Pro Max でUIテスト実行（xcbeautifyでログをフォーマット）
          echo "Running UI tests for iPhone 16 Pro Max..."
          xcodebuild test \
            -project BabySteps.xcodeproj \
            -scheme BabySteps \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro Max,OS=18.6' \
            -only-testing:BabyStepsUITests/ScreenshotUITests \
            -resultBundlePath test-results-iphone.xcresult \
            -verbose | xcbeautify || echo "iPhone UI tests failed, but continuing..."
          
      - name: Run UI Tests for iPad
        if: ${{ github.event.inputs.device_type == 'both' || github.event.inputs.device_type == 'ipad' || github.event_name == 'pull_request' }}
        run: |
          # iPad Pro 13-inch (M4) でUIテスト実行（xcbeautifyでログをフォーマット）
          echo "Running UI tests for iPad Pro 13-inch (M4)..."
          xcodebuild test \
            -project BabySteps.xcodeproj \
            -scheme BabySteps \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPad Pro 13-inch (M4),OS=18.6' \
            -only-testing:BabyStepsUITests/ScreenshotUITests \
            -resultBundlePath test-results-ipad.xcresult \
            -verbose | xcbeautify || echo "iPad UI tests failed, but continuing..."
          
      - name: Extract Screenshots from iPhone Tests
        if: ${{ github.event.inputs.device_type == 'both' || github.event.inputs.device_type == 'iphone' || github.event_name == 'pull_request' }}
        run: |
          # テスト結果からスクリーンショットを抽出
          if [ -f "test-results-iphone.xcresult" ]; then
            mkdir -p screenshots/iphone
            
            # xcresultからスクリーンショットを抽出
            xcrun xcresulttool export \
              --path test-results-iphone.xcresult \
              --output-path screenshots/iphone \
              --type screenshot || echo "Failed to extract iPhone screenshots"
            
            # ファイル名を整理
            cd screenshots/iphone
            for file in *.png; do
              if [[ -f "$file" ]]; then
                # ファイル名をApp Store用に整理
                case "$file" in
                  *"01-main-screen"*) mv "$file" "01-main-screen.png" ;;
                  *) echo "Unknown screenshot: $file" ;;
                esac
              fi
            done
            cd ../..
          else
            echo "iPhone test results not found, creating placeholder screenshots"
            mkdir -p screenshots/iphone
            echo "Screenshots could not be generated due to test failure" > screenshots/iphone/error.txt
          fi
          
      - name: Extract Screenshots from iPad Tests
        if: ${{ github.event.inputs.device_type == 'both' || github.event.inputs.device_type == 'ipad' || github.event_name == 'pull_request' }}
        run: |
          # テスト結果からスクリーンショットを抽出
          if [ -f "test-results-ipad.xcresult" ]; then
            mkdir -p screenshots/ipad
            
            # xcresultからスクリーンショットを抽出
            xcrun xcresulttool export \
              --path test-results-ipad.xcresult \
              --output-path screenshots/ipad \
              --type screenshot || echo "Failed to extract iPad screenshots"
            
            # ファイル名を整理
            cd screenshots/ipad
            for file in *.png; do
              if [[ -f "$file" ]]; then
                # ファイル名をApp Store用に整理
                case "$file" in
                  *"01-main-screen"*) mv "$file" "01-main-screen.png" ;;
                  *) echo "Unknown screenshot: $file" ;;
                esac
              fi
            done
            cd ../..
          else
            echo "iPad test results not found, creating placeholder screenshots"
            mkdir -p screenshots/ipad
            echo "Screenshots could not be generated due to test failure" > screenshots/ipad/error.txt
          fi
          
      - name: Upload screenshots as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ui-test-screenshots-${{ github.run_number }}
          path: screenshots/
          retention-days: 30
          
      - name: Create summary
        run: |
          echo "## 📱 UI Test Screenshots Generated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Method**: XCUITest with automated UI interactions" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Log Formatting**: xcbeautify for beautiful Xcode logs" >> $GITHUB_STEP_SUMMARY
          echo "**Current Test**: Main screen screenshot only (simplified for stability)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "screenshots/iphone" ]; then
            if [ -f "screenshots/iphone/error.txt" ]; then
              echo "### ❌ iPhone Screenshots - Failed" >> $GITHUB_STEP_SUMMARY
              echo "Screenshots could not be generated due to test failure" >> $GITHUB_STEP_SUMMARY
            else
              echo "### 📱 iPhone Screenshots - Success" >> $GITHUB_STEP_SUMMARY
              echo "- Main Screen - メイン画面" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -d "screenshots/ipad" ]; then
            if [ -f "screenshots/ipad/error.txt" ]; then
              echo "### ❌ iPad Screenshots - Failed" >> $GITHUB_STEP_SUMMARY
              echo "Screenshots could not be generated due to test failure" >> $GITHUB_STEP_SUMMARY
            else
              echo "### 📱 iPad Screenshots - Success" >> $GITHUB_STEP_SUMMARY
              echo "- Main Screen - メイン画面" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "**📥 Download screenshots:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to Actions tab → UI Test Screenshots" >> $GITHUB_STEP_SUMMARY
          echo "2. Click on this run: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "3. Scroll down to Artifacts section" >> $GITHUB_STEP_SUMMARY
          echo "4. Download 'ui-test-screenshots-${{ github.run_number }}'" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**💡 Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "Once this basic test passes, we can gradually add more screenshot tests:" >> $GITHUB_STEP_SUMMARY
          echo "- Task list view" >> $GITHUB_STEP_SUMMARY
          echo "- Add task modal" >> $GITHUB_STEP_SUMMARY
          echo "- Task detail view" >> $GITHUB_STEP_SUMMARY
          echo "- Progress indicators" >> $GITHUB_STEP_SUMMARY